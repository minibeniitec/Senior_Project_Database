/* Source:      Create_Functions.psql
 * Author:      Benjamin A Garza III
 * Date:        March 25, 2020
 * Class:       CMPS 4928 - Senior Seminar II
 * Purpose:     Create all tables.
 *
 * Run:
 *     psql -d thedatabase [-U <username> -h IP/hostname] -f Create_Tables.sql
 */




-- New Party -- 
-- Params: Party Name, Party Size -- 
CREATE OR REPLACE FUNCTION new_party(pname character varying, psize integer)
  RETURNS integer AS
$BODY$
DECLARE
   o_id integer;
BEGIN
   -- Inserts the new party into the system
   INSERT INTO Orders(PartyName, PartySize)
   VALUES (pname, psize)
   RETURNING OrderID INTO o_id;

   -- Return the new id so we can use it in a select clause or return the new id into the user application
    RETURN o_id;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;



-- Seat Guests --
-- Param: order_id, server_id, table_id --
CREATE OR REPLACE FUNCTION seat_party(o_id integer, s_id integer, t_id integer) 
  RETURNS integer AS
$BODY$
BEGIN
   -- Updates the seated party order
   UPDATE Orders
   SET ServerID = s_id, TableID = t_id
   WHERE OrderID = o_id;
   RETURN 0;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;



-- New Table Visit --
-- Param: table_id --
CREATE OR REPLACE FUNCTION new_table_visit(t_id integer)
  RETURNS integer AS
$BODY$
DECLARE
   o_id integer;
BEGIN
   -- Finds the most recent order with given table assigned.
   SELECT MAX(OrderID)
   FROM Orders
   WHERE TableID = t_id
   INTO o_id;

   INSERT INTO TableVisits (OrderID)
   VALUES (o_id);

   RETURN 0;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;



-- Check Last Visit --
-- Params: OrderID --
CREATE OR REPLACE FUNCTION last_visit(o_id integer)
  RETURNS time AS
$BODY$
DECLARE
   last_visit time;
BEGIN
   -- Inserts the new party into the system
   SELECT MAX(StartTime)
   FROM TableVisits
   WHERE OrderID = o_id
   INTO last_visit;

   -- Return the new id so we can use it in a select clause or return the new id into the user application
    RETURN last_visit;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;


-- Party Check Out --
-- Param: OrderID, Experience_Rating (1-5)
CREATE OR REPLACE FUNCTION check_out(o_id integer, exp integer)
   RETURNS integer AS
$BODY$
BEGIN
   -- Updates the leaving party order
   UPDATE Orders
   SET experience = exp, CheckOutTime = Current_Time
   WHERE OrderID = o_id;

   RETURN 0;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;


-- Party Check Out --
-- Param: OrderID, Experience_Rating (1-5)
CREATE OR REPLACE FUNCTION check_out(o_id integer, exp integer)
   RETURNS integer AS
$BODY$
BEGIN
   -- Updates the leaving party order
   UPDATE Orders
   SET experience = exp, CheckOutTime = Current_Time
   WHERE OrderID = o_id;

   RETURN 0;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE;

